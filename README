NAME
    Mock::Person::DE - Generate random sets of German names.

SYNOPSIS
     use Mock::Person::DE qw(first_male first_female last_male last_female
             middle_male middle_female name);
     my $first_male = first_male();
     my $first_female = first_female();
     my $last_male = last_male();
     my $last_female = last_female();
     my $middle_male = middle_male();
     my $middle_female = middle_female();
     my $name = name($sex);

DESCRIPTION
    Data for this module was found on these pages:

    Last names
        about.com <http://german.about.com/od/names/a/German-Surnames.htm>

    Middle names
        There's usually no distinction between a first and middle name in
        Germany.

    First names
        indiachildnames.com
        <http://www.indiachildnames.com/top100/germannames.html>

SUBROUTINES
    first_male()
            Returns random first name of male person.

    first_female()
            Returns random first name of female person.

    last_male()
            Returns random last name of male person.

    last_female()
            Returns random last name of female person.

    middle_male()
            Returns random middle name of male person.

    middle_female()
            Returns random middle name of female person.

    name([$sex])
            Recieves scalar with sex of the person ('male' or 'female') and
            returns scalar with generated name. Default value of $sex
            variable is undef, that means random name.

    name_male()
            Returns random male name.

    name_female()
            Returns random female name.

VARIABLES
    TYPE
             Name type.
             Possible values are: 'two', 'three'.
             Default value is 'three'.

EXAMPLE1
     # Pragmas.
     use strict;
     use warnings;

     # Modules.
     use Encode qw(encode_utf8);
     use Mock::Person::DE qw(name);

     # Error.
     print encode_utf8(name())."\n";

     # Output like.
     # Cedric Nick Baumann

EXAMPLE2
     # Pragmas.
     use strict;
     use warnings;

     # Modules.
     use Encode qw(encode_utf8);
     use Mock::Person::DE;

     # Get all last male names.
     my @last_males = @Mock::Person::DE::last_male;

     # Print out.
     print sort map { encode_utf8($_)."\n" } @last_males;

     # Output:
     # Albrecht
     # Arnold
     # Bauer
     # Baumann
     # Beck
     # Becker
     # Berger
     # Bergmann
     # Brandt
     # Braun
     # Busch
     # Böhm
     # Dietrich
     # Engel
     # Fischer
     # Frank
     # Franke
     # Friedrich
     # Fuchs
     # Graf
     # Groß
     # Günther
     # Haas
     # Hahn
     # Hartmann
     # Heinrich
     # Herrmann
     # Hoffmann
     # Hofmann
     # Horn
     # Huber
     # Jung
     # Jäger
     # Kaiser
     # Keller
     # Klein
     # Koch
     # Kraus
     # Krause
     # Krämer
     # Krüger
     # Kuhn
     # Köhler
     # König
     # Kühn
     # Lang
     # Lange
     # Lehmann
     # Lorenz
     # Ludwig
     # Maier
     # Martin
     # Mayer
     # Meier
     # Meyer
     # Möller
     # Müller
     # Neumann
     # Otto
     # Peters
     # Pfeiffer
     # Pohl
     # Richter
     # Roth
     # Sauer
     # Schmid
     # Schmidt
     # Schmitt
     # Schmitz
     # Schneider
     # Scholz
     # Schreiber
     # Schröder
     # Schubert
     # Schulte
     # Schulz
     # Schulze
     # Schumacher
     # Schuster
     # Schwarz
     # Schäfer
     # Seidel
     # Simon
     # Sommer
     # Stein
     # Thomas
     # Vogel
     # Vogt
     # Voigt
     # Wagner
     # Walter
     # Weber
     # Weiß
     # Werner
     # Winkler
     # Winter
     # Wolf
     # Wolff
     # Ziegler
     # Zimmermann

DEPENDENCIES
    Exporter, List::MoreUtils, Readonly.

SEE ALSO
    Mock::Person, Mock::Person::CZ, Mock::Person::EN, Mock::Person::SK,
    Mock::Person::SK::ROM, Mock::Person::SV, Mock::Person::RU.

REPOSITORY
    <https://github.com/tupinek/Mock-Person-DE>

AUTHOR
    Michal Špaček <mailto:skim@cpan.org>

    <http://skim.cz>

LICENSE AND COPYRIGHT
    BSD license.

VERSION
    0.03

